1.
Dubbo 采用单一长连接和 NIO 异步通讯
适合：
小数据量大并发的服务调用
服务消费者机器数远大于服务提供者机器数的情况 （C>>P)

不适合
传送大数据量的服务

特性

缺省协议，使用基于 mina 1.1.7 和 hessian 3.2.1 的 tbremoting 交互。

	连接个数：单连接
	连接方式：长连接
	传输协议：TCP
	传输方式：NIO 异步传输
	序列化：Hessian 二进制序列化
	适用范围：传入传出参数数据包较小（建议小于100K），消费者比提供者个数多，单一消费者无法压满提供者，尽量不要用 dubbo 协议传输大文件或超大字符串。
	适用场景：常规远程服务方法调用

约束
参数及返回值需实现 Serializable 接口
参数及返回值不能自定义实现 List, Map, Number, Date, Calendar 等接口，只能用 JDK 自带的实现，因为 hessian 会做特殊处理，自定义实现类中的属性值都会丢失。
Hessian 序列化，只传成员属性值和值的类型，不传方法或静态变量
服务器端和客户端对领域对象并不需要完全一致，而是按照最大匹配原则

2.
RMI 协议采用 JDK 标准的 java.rmi.* 实现，采用阻塞式短连接和 JDK 标准序列化方式


	如果正在使用 RMI 提供服务给外部访问 1，同时应用里依赖了老的 common-collections 包 的情况下，存在反序列化安全风险 
	 commons-collections3 请升级到 3.2.2；将 commons-collections4 请升级到 4.1。新版本的 commons-collections 解决了该问题


特性
	连接个数：多连接
	连接方式：短连接
	传输协议：TCP
	传输方式：同步传输
	序列化：Java 标准二进制序列化
	适用范围：传入传出参数数据包大小混合，消费者与提供者个数差不多，可传文件。
	适用场景：常规远程服务方法调用，与原生RMI服务互操作
约束
参数及返回值需实现 Serializable 接口
dubbo 配置中的超时时间对 RMI 无效，需使用 java 启动参数设置：-Dsun.rmi.transport.tcp.responseTimeout=3000，参见下面的 RMI 配置

dubbo.properties 配置
	dubbo.service.protocol=rmi
RMI配置
	java -Dsun.rmi.transport.tcp.responseTimeout=3000













