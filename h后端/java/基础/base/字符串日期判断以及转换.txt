	string2Date 和 isDate 转换的时候，如果使用 ParsePosition ，则不会抛出异常，
	转换时要求严格格式，使用 format.setLenient(false); 这样 2011-03-024 会被验证为非法，不会转换
	默认是宽松 格式

	ParsePosition 是 Format 及其子类所使用的简单类，用来在解析过程中跟踪当前位置, 
	如果没有长度判断 21218-012-19 也被认为是合法日期，转换为 21218-12-19，
	21218-022-19 不行 ，转换格式为 "yyyy-MM-dd"

	因为parse(source)抛出异常 ，是根据 pos.index == 0  得出的
	    public Date parse(String source) throws ParseException
    {
        ParsePosition pos = new ParsePosition(0);
        Date result = parse(source, pos);
        if (pos.index == 0) // (源码没用)如果用   pos.getErrorIndex() ，需要用是否等于 -1 ，（表示没有被set,=-1 表示没有错误）
            throw new ParseException("Unparseable date: \"" + source + "\"" ,
                pos.errorIndex);
        return result;
    }
   而  parse(source, pos)，
ParsePosition 本身就是跟着解析位置，能够跟踪到出错的地方 （
	ParsePosition 中有此方法
	getErrorIndex() 
          获取出错时的索引，如果没有设置错误索引，则为 -1。
），所以不用抛出异常

---------------
R:
public  Date string2StrictDate(String dateStr, String pattern) {
        if(dateStr == null){
            return null;
        }
        if(pattern == null){
            pattern = "yyyy-MM-dd";
        }
        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
        ParsePosition pos = new ParsePosition(0);
        sdf.setLenient(false); // 严格格式
        Date date = sdf.parse(dateStr, pos);
        int index = pos.getIndex();
        if ( index== 0) { // 转换失败,如果用   pos.getErrorIndex() ，需要用是否等于 -1 ，（表示没有被set,=-1 表示没有错误）
            return null;
        }
        if (index > sdf.format(date).length()) { // 需要格式化后再判断
            return null;
        }
        
        return date;
    }

------------
	public static boolean isEmpty(String value){
            if(value == null || "".equals(value)){
                return true;
            }
            return false;
        }
        
        public static Date string2Date(String date,String p) {
            SimpleDateFormat format = new SimpleDateFormat(p);
            format.setLenient(false);
             try {
                return format.parse(date);
            } catch (ParseException e) {
                // TODO Auto-generated catch block
               return null;
            }
        }
        
       public static boolean isDate(int num, String value, String format) {

        SimpleDateFormat sdf = null;
        ParsePosition pos = new ParsePosition(num);// 指定从所传字符串的首位开始解析

        if (value == null || isEmpty(format)) {
            return false;
        }
        try {
            sdf = new SimpleDateFormat(format);
            sdf.setLenient(false); // 严格格式
            Date date = sdf.parse(value, pos);
            int index = pos.getIndex();
            System.out.println(index);
	 // getErrorIndex -> 11 ,2011-013-24,而index 还是0, 只需要根据index是否等0就可以判断出来是否解析正确
            System.out.println(pos.getErrorIndex()); 
            if ( index== 0) { // 转换失败
                return false;
            }
            // 更为严谨的日期,如2011-03-024认为是不合法的，但 2011-012-24 sdf.setLenient(false);判断会通过，此处不会通过
            if (index > sdf.format(date).length()) { // 需要格式化后再判断，否则可能是英文的Wed Dec 19 00:00:00 CST 21218
                return false;
            }
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
        