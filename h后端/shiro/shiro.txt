Authentication：身份认证 / 登录，验证用户是不是拥有相应的身份；

Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；

Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；

Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；

Web Support：Web 支持，可以非常容易的集成到 Web 环境；

Caching：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；

Concurrency：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；

Testing：提供测试支持；

Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；

Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。

----

在 shiro 中，用户需要提供 principals （身份）和 credentials（证明）给 shiro，从而应用能验证用户身份：

principals：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个 principals，但只有一个 Primary principals，一般是用户名 / 密码 / 手机号。

credentials：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。

最常见的 principals 和 credentials 组合就是用户名 / 密码了。接下来先进行一个基本的身份认证。

----------


身份认证流程如下：

首先调用 Subject.login(token) 进行登录，其会自动委托给 Security Manager，调用之前必须通过 SecurityUtils.setSecurityManager() 设置；
SecurityManager 负责真正的身份验证逻辑；它会委托给 Authenticator 进行身份验证；
Authenticator 才是真正的身份验证者，Shiro API 中核心的身份认证入口点，此处可以自定义插入自己的实现；
Authenticator 可能会委托给相应的 AuthenticationStrategy 进行多 Realm 身份验证，默认 ModularRealmAuthenticator 会调用 AuthenticationStrategy 进行多 Realm 身份验证；
Authenticator 会把相应的 token 传入 Realm，从 Realm 获取身份验证信息，如果没有返回 / 抛出异常表示身份验证失败了。此处可以配置多个 Realm，将按照相应的顺序及策略进行访问。

 Subject 及 Realm，分别是主体及验证主体的数据源。

 Realm：域，Shiro 从从 Realm 获取安全数据（如用户、角色、权限）
--------
 shiro-realm.ini 指定实现
	#声明一个realm  
	myRealm1=com.java.shiroTest.MyRealm1  
	myRealm2=com.java.shiroTest.MyRealm2 
	#指定securityManager的realms实现  
	securityManager.realms=$myRealm1,$myRealm2

1.如果删除 “securityManager.realms=$myRealm1,$myRealm2”，
  那么securityManager 会按照 realm 声明的顺序进行使用
 （即无需设置 realms 属性，其会自动发现）

2.当我们显示指定 realm 后，其他没有指定 realm 将被忽略，
  如 “securityManager.realms=$myRealm1”，那么 myRealm2 不会被自动设置进去。

------------

Shiro 默认提供的 Realm 
 一般继承 AuthorizingRealm（授权）即可；其继承了 AuthenticatingRealm（即身份验证），
 而且也间接继承了 CachingRealm（带有缓存实现）

 org.apache.shiro.realm.text.IniRealm：[users] 部分指定用户名 / 密码及其角色；[roles] 部分指定角色即权限信息；
 org.apache.shiro.realm.text.PropertiesRealm： user.username=password,role1,role2 指定用户名 / 密码及其角色；
	role.role1=permission1,permission2 指定角色及权限信息
org.apache.shiro.realm.jdbc.JdbcRealm  通过 sql 查询相应的信息

------


#FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
#AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息；
#AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了


	--

		#指定securityManager的authenticator实现
		authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
		securityManager.authenticator=$authenticator

		#指定securityManager.authenticator的authenticationStrategy
		#FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
		#AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息；
		#AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了

		allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy
		securityManager.authenticator.authenticationStrategy=$allSuccessfulStrategy

		myRealm1=com.java.shiroTest.MyRealm1
		myRealm2=com.java.shiroTest.MyRealm2
		myRealm3=com.java.shiroTest.MyRealm3
		securityManager.realms=$myRealm1,$myRealm3

	--
 com.java.shiroTest.AuthenticatorTest

-----------------


org.apache.shiro.authc.pam.AllSuccessfulStrategy

自定义实现时一般继承org.apache.shiro.authc.pam.AbstractAuthenticationStrategy即可，
具体可以参考代码com.github.zhangkaitao.shiro.chapter2.authenticator.strategy
	包下OnlyOneAuthenticatorStrategy 和AtLeastTwoAuthenticatorStrategy。