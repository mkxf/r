/ˈjæməl/
-------------  由于兼容性问题，不同语言间的数据流转建议现在不要用YAML.
，没有自己的数据类型的定义，而是使用实现语言的数据类型。正因为此在不同语言间流转会有问题
	如果设立   兼容认证机制 就没有此问题，但现在还没有
-----------
语法
	Structure通过空格来展示。Sequence里的项用"-"来代表，Map里的键值对用":"分隔.

em ->
	name: John Smith
	age: 37
	spouse:
	    name: Jane Smith
	    age: 25
	children:
	    -   name: Jimmy Smith
		age: 15
	    -   name: Jenny Smith
		age 12


---------------------

1. 它的基本语法规则如下。
	大小写敏感
	使用缩进表示层级关系
	缩进时不允许使用Tab键，只允许使用空格。
	缩进的空格数目不重要，只要相同层级的元素左侧对齐即可

2. # 表示注释，从这个字符一直到行尾，都会被解析器忽略

3.	YAML 支持的数据结构有三种。
	对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）
	数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）
	纯量（scalars）：单个的、不可再分的值

4. ---  表示文件开始

5. - 表示数组  
	-
	 - Cat
	 - Dog
	 - Goldfish
		-> [ [ 'Cat', 'Dog', 'Goldfish' ] ]

 animal: [Cat, Dog]  -> { animal: [ 'Cat', 'Dog' ] }
 animal: pets   ->  { animal: 'pets' }



6. 布尔值用true和false表示。

 null用~表示。

7. 使用两个感叹号，强制转换数据类型。
	 e: !!str 123
	 f: !!str true
	-> { e: '123', f: 'true' }


8. 字符串不需要特殊处理，包含空格或特殊字符，，则需要引号
 单引号之中如果还有单引号，必须连续使用两个单引号转义。
 str: 'labor''s day'  ->  { str: 'labor\'s day' }

9. 多行  |  或者 >
a. em:
	  this: |
	  Foo
	  Bar
	that: >
	  Foo
	  Bar
 ->  this: 'Foo\nBar\n', that: 'Foo Bar\n' }

b. +表示保留文字块末尾的换行，-表示删除字符串末尾的换行 

	 s1: |
	  Foo

	s2: |+
	  Foo (有2个换行)


	s3: |-
	  Foo

 ->  带上 | 总共3个 \n
  { s1: 'Foo\n', s2: 'Foo\n\n\n', s3: 'Foo' }

10.  锚点&和别名*，可以用来引用
	&用来建立锚点 <<表示合并到当前数据，*用来引用锚点
	defaults: &defaults
	  adapter:  postgres
	  host:     localhost

	test:
	  database: myapp_test
	  <<: *defaults
->
	  defaults:
	  adapter:  postgres
	  host:     localhost

	test:
	  database: myapp_test
	  adapter:  postgres
	  host:     localhost
-----------------------------------------------IBM


YAML使用实现语言的数据类型。我们看一下一些JYaml支持的Java数据类型：
原始数据和封装类（比如int，java.lang.Integer）
JavaBean兼容对象（Structure支持）
Collection （sequence支持）
List
Set
Map （map支持）
Arrays （sequence支持）
BigInteger 和BigDecimal
Date


我们给出John.yaml的java描述：
public class Person {
    private String name;
    private int age;
    private Person sponse;
    private Person[] children;
    // setXXX, getXXX方法略.
}

装配一个Jone：
   Person john = new Person();
    john.setAge(37);
    john.setName("John Smith");
    Person sponse = new Person();
    sponse.setName("Jane Smith");
    sponse.setAge(25);
    john.setSponse(sponse);
    Person[] children = {new Person(), new Person()};
    children[0].setName("Jimmy Smith");
    children[0].setAge(15);
    children[1].setName("Jenny Smith");
    children[1].setAge(12);
    john.setChildren(children);

使用JYaml把Jone“Dump”出来：
     File dumpfile = new File("John_dump.yaml");
    Yaml.dump(john, dumpfile);

   ->

 --- !yaml.test.internal.Person
age: 37
children: !yaml.test.internal.Person[]
  - !yaml.test.internal.Person
    age: 15
    name: Jimmy Smith
  - !yaml.test.internal.Person
    age: 12
    name: Jenny Smith
name: John Smith
sponse: !yaml.test.internal.Person
  age: 25
  name: Jane Smith




  --------------

  其中!yaml.test.internal.Person是一些类型的信息。load的时候需要用。
 现在用JYaml把Jone_dump.yaml load进来：
    Person john2 = (Person) Yaml.loadType(dumpfile, Person.class);

    还可以用下面的代码dump出没有类型信息的John.yaml：
Yaml.dump(john,dumpfile, true);



为简便起见，我们只是把同一个john写10次：
    YamlEncoder enc = new YamlEncoder(new FileOutputStream(dumpfile));
    for(int i=0; i<10; i++){
        john.setAge(37+i);
        enc.writeObject(john);
        enc.flush();
    }
   enc.close();
下面再把这十个对象一个一个读出来（注意while循环退出的方式）：
      YamlDecoder dec = new YamlDecoder(new FileInputStream(dumpfile));
      int age = 37;
      while(true){
          try{
              john = (Person) dec.readObject();
              assertEquals(age, john.getAge());
              age++;
          }catch(EOFException eofe){
              break;
          }
      }


----------------
YAML的适用范围
由于实现简单，解析成本很低，YAML特别适合在脚本语言中使用。列一下现有的语言实现：Ruby，Java，Perl，Python，PHP，OCaml，JavaScript。除了Java，其他都是脚本语言.
YAML比较适合做序列化。因为它是宿主语言数据类型直转的。
YAML做配置文件也不错。比如Ruby on Rails的配置就选用的YAML。对ROR而言，这很自然，也很省事.
由于兼容性问题，不同语言间的数据流转建议现在不要用YAML.