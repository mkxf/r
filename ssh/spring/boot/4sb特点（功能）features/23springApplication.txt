Part IV. Spring Boot features  sb 功能
	
	使用和配置sb能用到的关键功能

===============================
23. SpringApplication  spring应用
	
	SpringApplication类提供了 一个从main()方法启动的方式,方便的引导spring 应用的方式，
	许多情况下，只需委派静态的 SpringApplication.run 方法即可
	---- code
		public static void main(String[] args) {
	    SpringApplication.run(MySpringConfiguration.class, args);
	}
	-----------
	默认情况下，INFO将显示日志消息，包括启动应用程序的用户等相关启动细节。

23.1 Startup failure 启动失败
	
	如果启动失败，可以注册 FailureAnalyzers  ，获取专门的错误信息和具体的解决方法
	一般格式：
		描述： ..
		解决办法： （Action：）.

	Spring Boot提供了大量的FailureAnalyzer实现，您可以 非常容易地添加自己的。

	如果 analyzers/故障分析器  不能处理异常,
	可以显示完整的自动配置报告，以更好地了解出现的问题

	打开  debug 属性，或者 启动 org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer
	的 日志记录、

	debug 启动
	$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug

===========================
23.2 Customizing the Banner 自定义标语/横幅 （应该是项目头部显示的东西，或者网址前边的标志）
	banner 在启动的时候能够打印并添加到 classpath中的 banner.txt里
	或者 通过 banner.location 设置，
	banner.charset 设置编码，默认 UTF-8.
	除了添加成 text，还可以是 banner.gif, banner.jpg or banner.png
	或者 设置 banner.image.location  属性
	图像将被转换成ASCII艺术表现，并打印在任何文字横幅上方。
	
	banner.txt可以使用以下任何一个占位符：
	----------------------------------------------------
	变量

	${application.version}		在 MANIFEST.MF 中声明的 项目的版本  --MV
					例如 Implementation-Version: 1.0 打印车感你 1.0

${application.formatted-version}	格式化 --MV ，并用brackets/方括号，并v开头
					如(v1.0)
	
${spring-boot.version}			sb的版本

${spring-boot.formatted-version}	格式化 sb 的版本,v开头并括起来，
					如 (v2.0.0.BUILD-SNAPSHOT)

${Ansi.NAME} (or ${AnsiColor.NAME},		NAME 是用 ANSI 转义码的  See AnsiPropertySource for details
${AnsiBackground.NAME}, ${AnsiStyle.NAME})

${application.title}				 MANIFEST.MF 中声明应用的头部
						 如： Implementation-Title: MyApp is printed as MyApp.

----------------------------------------
	
	以编码的方式生成 banner ，可以使用  SpringApplication.setBanner(…​) 方法
	可以通过 org.springframework.boot.Banner 接口 实现自己的 printBanner() method.


	设置spring.main.banner-mode属性，决定是否在控制台通过 System.out 输出
	还是使用日志，或者关闭

	名字为 springBootBanner 的printed banner 会被注册成一个 单例bean
	
	设置为 off 对应 false 进行 banner  关闭
	-------
	spring:
	    main:
		banner-mode: "off"
	----------
			
==============================================
23.3 Customizing SpringApplication  自定义
	创建本地实例并自定义，更改默认配置
	如 关闭 baner

	--------
	public static void main(String[] args) {
	    SpringApplication app = new SpringApplication(MySpringConfiguration.class);
	    app.setBannerMode(Banner.Mode.OFF);
	    app.run(args);
	}
	--------------
		传给 SpringApplication  构造方法参数的 是 spring beans 的配置源 ，
		一般是 @Configuration 类，也可以是xml配置，或者 被扫描的包 

		The constructor arguments passed to SpringApplication are 
		configuration sources for spring beans.
		In most cases these will be references to @Configuration classes,
		but they could also be references to XML configuration 
		or to packages that should be scanned

	也可以 使用 application.properties  进行 SpringApplication 配置
 
===========================
23.4 Fluent builder API	 流利的构建API	-> 就是 链式构建API
	可以使用  SpringApplicationBuilder  构建一个具有层级关系的ApplicationContext 
	或者仅仅是  链式的 构建API
	----------------
		new SpringApplicationBuilder()
			.sources(Parent.class)
			.child(Application.class)
			.bannerMode(Banner.Mode.OFF)
			.run(args);
	--------------
	创建 一个 ApplicationContext 的层次结构时 会有一些限制，
	比如 WEB 组件 必须在 子 上下文中，还有一些环境，必须在 父子上下文中
	See the SpringApplicationBuilder Javadoc for full details.
===================
23.5 Application events and listeners  事件和监听
	除了常见的 spring 框架 事件，比如 ContextRefreshedEvent 
	SpringApplication  增加了一些

	一些事件在 ApplicationContext  创建之前就被触发
	所以无法在他们上边注册监听，例如 @Bean

	 可以通过 SpringApplication.addListeners(…​) 
	 or SpringApplicationBuilder.listeners(…​) 注册
	
	自动注册：
	 无论是以哪种方式创建的应用，都可以通过
	 在项目里添加 一个文件 META-INF/spring.factories
	 通过此  key  来引用监听
		  |
	org.springframework.context.ApplicationListener=com.example.project.MyListener

	Application events 按以下顺序发送
		事件名称， 发送时间/条件
	1.  ApplicationStartingEvent 
		运行开始时发送，但除了注册监听和初始化外，没有其他进程
	2. ApplicationEnvironmentPreparedEvent 
		上下文/context 获取到 环境信息/Environment,但context 还没创建
	3. ApplicationPreparedEvent 
		定义的 bean 完成加载，但还没刷新
	4. ApplicationReadyEvent 
		完成刷新，相关回调已完成，指示应用准备服务请求
	5.ApplicationFailedEvent 
		异常

	---------
		通常不需要用到   application events ，
		但知道会很方便。sb内部使用事件来进行 大量任务处理
=======================
23.6 Web environment   Web环境
	SpringApplication 试图创建正确的  ApplicationContext 
	根据是否是 web application  选择

	AnnotationConfigApplicationContext or
	AnnotationConfigServletWebServerApplicationContext 
	-- 差一个  ServletWebServer

用于确定“Web环境”的算法是相当简单的（基于几个类的存在）
使用 setWebEnvironment(boolean webEnvironment) 覆盖默认值
	也可以调用 setApplicationContextClass(…​). 
	来完全控制 ApplicationContext 的类型
===========
23.7 Accessing application arguments 
	访问应用程序参数
	
	访问传给 SpringApplication.run(…​) 的参数，
	需要注入 org.springframework.boot.ApplicationArguments bean
	此接口可以访问 String[]参数，并解析  option and non-option 参数
	-------------------
		import org.springframework.boot.*
		import org.springframework.beans.factory.annotation.*
		import org.springframework.stereotype.*

		@Component
		public class MyBean {

		    @Autowired
		    public MyBean(ApplicationArguments args) {
			boolean debug = args.containsOption("debug");
			List<String> files = args.getNonOptionArgs();
			// if run with "--debug logfile.txt" debug=true, files=["logfile.txt"]
		    }

		}


	------------
	sb 会在spring 的环境中 注册一个 CommandLinePropertySource 
	这样可以通过 @Value 注解 注入单个 应用参数

===============================
23.8 Using the ApplicationRunner or CommandLineRunner 
	
	实现 ApplicationRunner or CommandLineRunner 接口，可以
	一旦 SpringApplication 已经开始，需要运行一些特定的代码

	实现方式相同，都有一个run方法，
	此方法会在 SpringApplication.run(…​) 完成之前被调用

whereas  但是/ 然而 【weər'æz】
CommandLineRunner  接受的是 简单的 String 数组
ApplicationRunner -> 实现了 ApplicationArguments  接口的参数
	-----------------
	import org.springframework.boot.*
	import org.springframework.stereotype.*

	@Component
	public class MyBean implements CommandLineRunner {

	    public void run(String... args) {
		// Do something...
	    }

	}

	--------------
 指定顺序：  实现接口 org.springframework.core.Ordered 
        或者 使用注解 org.springframework.core.annotation.Order
================================
23.9 Application exit
	每个  SpringApplication 会在JVM 上注册一个关闭 hook/钩子
	确定ApplicationContext 退出时可以正常关闭。
	所有标准的spring生命周期回调，比如 DisposableBean 接口，
	@PreDestroy 注解，都会用到

	如果在应用结束时，返回特定的退出代码，可以实现 org.springframework.boot.ExitCodeGenerator 接口

=====================

23.10 Admin features  管理功能

 通过 spring.application.admin.enabled 属性指定启用 管理功能
 这会 暴露 SpringApplicationAdminMXBean  在 MBeanServer平台上

 可以使用这个功能，进行远程管理sb的应用，
 对于任何包裹服务的实现都很有用
This could also be useful for any service wrapper implementation

	通过 local.server.port 获取应用的运行端口
	Take care：开启 MBean 功能会暴露 关闭应用的方法







	
