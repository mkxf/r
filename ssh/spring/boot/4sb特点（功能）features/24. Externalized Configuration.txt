24. Externalized Configuration 外部配置
	使用外部配置，可以使 代码工作 在不同环境
 可以使用 属性文件，YAML文件，环境变量和命令行参数来外部化配置
属性的值可以直接使用 @Value 注解注入到 bean中
通过Spring的Environment抽象访问或 通过绑定到结构化对象 @ConfigurationProperties

 Property values can be injected directly into your beans using the @Value annotation, accessed via Spring’s Environment abstraction or bound to structured objects via @ConfigurationProperties.

 PropertySource 按一下顺序使用
 1. devtools 处于活动时，devtools 全局设置属性，
	位置： ~/.spring-boot-devtools.properties
 2. 测试里 @TestPropertySource 的注解
 3. 测试里 @SpringBootTest#properties 的注解
 4. 命令行里的参数
 5. SPRING_APPLICATION_JSON 里的属性
	-- 嵌入在环境变量或系统属性中的内部JSON
 6. ServletConfig  初始化参数
 7. ServletContext 初始化参数
 8. 来自 java:comp/env  JNDI里的属性
 9. java 系统属性 System.getProperties()
 10. 操作系统变量
 11. 仅在 random.* 里有属性的 RandomValuePropertySource 
 12. 特定于应用程序属性jar包外部的配置文件
	（包括application-{profile}.propertiesYAML变体
	Profile-specific application properties outside of your packaged jar (application-{profile}.properties and YAML variants)
 13.  同12，外部改为内部
 14.  jar 外部的 应用程序属性 application.properties和YAML变体
	Application properties outside of your packaged jar (application.properties and YAML variants).
 15. 同14 内部
 16. @Configuration 类上的 @PropertySource 注解
 17. 默认属性，特指使用 SpringApplication.setDefaultProperties


---------------
具体例子， 使用 name  属性 开发一个 @Component
-----------
import org.springframework.stereotype.*
import org.springframework.beans.factory.annotation.*

@Component
public class MyBean {

    @Value("${name}")
    private String name;

    // ...

}
------------
 application.properties -- ap
1. 项目的 classpath中 (比如jar内部)，ap 提供了一个name的默认属性，
2. 当运行在一个新环境，jar外部的 ap 属性会覆盖此值，
3. 对于 一次性测试，可以使用特定的命令行开关
	比如：java -jar app.jar --name="Spring"

命令行支持 设置 SPRING_APPLICATION_JSON属性
	比如： UN*X shell
$ SPRING_APPLICATION_JSON='{"foo":{"bar":"spam"}}' java -jar myapp.jar
	
在spring 环境里可以得到 foo.bar=spam 
也支持在 系统变量里，使用JSON 像 spring.application.json 
$ java -Dspring.application.json='{"foo":"bar"}' -jar myapp.jar
或者命令参数
$ java -jar myapp.jar --spring.application.json='{"foo":"bar"}'
或者 JNDI
 java:comp/env/spring.application.json

 ================
24.1 Configuring random values 配置随机值
  RandomValuePropertySource  用来注入一个随机值 （比如 进入秘密或者测试用例）
produce integers, longs, uuids or strings, e.g.
----------
my.secret=${random.value}
my.number=${random.int}
my.bignumber=${random.long}
my.uuid=${random.uuid}
my.number.less.than.ten=${random.int(10)}
my.number.in.range=${random.int[1024,65536]}
--------------
random.int* 的语法是 打开（value，关闭 max)，
打开关闭可以是任意字符  （例子里 []）
value,max 必须是 整数。
如果 max 提供，value就是最小值。
-- 原句意思，可能是单个值？

断句 | 
The random.int* syntax is OPEN | value ( |, |max) | CLOSE
where the | OPEN,CLOSE | are any character 
and |value,max |are integers. 
If max is provided then value is the minimum value 
and max is the maximum (exclusive).

 =======================================
24.2 Accessing command line properties  访问命令行属性
	SpringApplication 默认会把命令行里的 参数 （-- 开头）
	转换为属性，并加到 spring 环境里
	 如  --server.port=9000
命令行的属性 优先级 高于 其他属性源

如果不想 命令行属性 添加到 环境里
可以使用 SpringApplication.setAddCommandLineProperties(false) 进行设置

======================
24.3 Application property files 应用程序的属性文件
	SpringApplication将从application.properties以下位置的文件加载属性，
	并将它们添加到Spring中Environment

1.一个当前目录下 /config子目录。
2.当前目录
3.打包到 classpath 的 /config
4.classpath根

列表按优先级按从高到低排序（高的覆盖低的， 1 > 2 > 3 > 4）。

可以使用YAML（'.yml'）文件替代“.properties”。

如果不喜欢application.properties配置文件名，
可以通过指定spring.config.name环境属性来切换到另一个。
还可以使用spring.config.location环境属性（目录位置的逗号分隔列表或文件路径）
引用显式位置。

$ java -jar myproject.jar --spring.config.name=myproject

or

$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties

spring.config.name  和 spring.config.location  比较早的加载文件，
这样可以确定环境属性，通常是 OS变量，系统属性，命令行参数


