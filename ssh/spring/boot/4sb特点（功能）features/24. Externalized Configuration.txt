24. Externalized Configuration 外部配置
	使用外部配置，可以使 代码工作 在不同环境
 可以使用 属性文件，YAML文件，环境变量和命令行参数来外部化配置
属性的值可以直接使用 @Value 注解注入到 bean中
通过Spring的Environment抽象访问或 通过绑定到结构化对象 @ConfigurationProperties

 Property values can be injected directly into your beans using the @Value annotation, accessed via Spring’s Environment abstraction or bound to structured objects via @ConfigurationProperties.

 PropertySource 按一下顺序使用
 1. devtools 处于活动时，devtools 全局设置属性，
	位置： ~/.spring-boot-devtools.properties
 2. 测试里 @TestPropertySource 的注解
 3. 测试里 @SpringBootTest#properties 的注解
 4. 命令行里的参数
 5. SPRING_APPLICATION_JSON 里的属性
	-- 嵌入在环境变量或系统属性中的内部JSON
 6. ServletConfig  初始化参数
 7. ServletContext 初始化参数
 8. 来自 java:comp/env  JNDI里的属性
 9. java 系统属性 System.getProperties()
 10. 操作系统变量
 11. 仅在 random.* 里有属性的 RandomValuePropertySource 
 12. 特定于应用程序属性jar包外部的配置文件
	（包括application-{profile}.propertiesYAML变体
	Profile-specific application properties outside of your packaged jar (application-{profile}.properties and YAML variants)
 13.  同12，外部改为内部
 14.  jar 外部的 应用程序属性 application.properties和YAML变体
	Application properties outside of your packaged jar (application.properties and YAML variants).
 15. 同14 内部
 16. @Configuration 类上的 @PropertySource 注解
 17. 默认属性，特指使用 SpringApplication.setDefaultProperties


---------------
具体例子， 使用 name  属性 开发一个 @Component
-----------
import org.springframework.stereotype.*
import org.springframework.beans.factory.annotation.*

@Component
public class MyBean {

    @Value("${name}")
    private String name;

    // ...

}
------------
 application.properties -- ap
1. 项目的 classpath中 (比如jar内部)，ap 提供了一个name的默认属性，
2. 当运行在一个新环境，jar外部的 ap 属性会覆盖此值，
3. 对于 一次性测试，可以使用特定的命令行开关
	比如：java -jar app.jar --name="Spring"

命令行支持 设置 SPRING_APPLICATION_JSON属性
	比如： UN*X shell
$ SPRING_APPLICATION_JSON='{"foo":{"bar":"spam"}}' java -jar myapp.jar
	
在spring 环境里可以得到 foo.bar=spam 
也支持在 系统变量里，使用JSON 像 spring.application.json 
$ java -Dspring.application.json='{"foo":"bar"}' -jar myapp.jar
或者命令参数
$ java -jar myapp.jar --spring.application.json='{"foo":"bar"}'
或者 JNDI
 java:comp/env/spring.application.json

 ================
24.1 Configuring random values 配置随机值
  RandomValuePropertySource  用来注入一个随机值 （比如 进入秘密或者测试用例）
produce integers, longs, uuids or strings, e.g.
----------
my.secret=${random.value}
my.number=${random.int}
my.bignumber=${random.long}
my.uuid=${random.uuid}
my.number.less.than.ten=${random.int(10)}
my.number.in.range=${random.int[1024,65536]}
--------------
random.int* 的语法是 打开（value，关闭 max)，
打开关闭可以是任意字符  （例子里 []）
value,max 必须是 整数。
如果 max 提供，value就是最小值。
-- 原句意思，可能是单个值？

断句 | 
The random.int* syntax is OPEN | value ( |, |max) | CLOSE
where the | OPEN,CLOSE | are any character 
and |value,max |are integers. 
If max is provided then value is the minimum value 
and max is the maximum (exclusive).

 =======================================
24.2 Accessing command line properties  访问命令行属性
	SpringApplication 默认会把命令行里的 参数 （-- 开头）
	转换为属性，并加到 spring 环境里
	 如  --server.port=9000
命令行的属性 优先级 高于 其他属性源

如果不想 命令行属性 添加到 环境里
可以使用 SpringApplication.setAddCommandLineProperties(false) 进行设置

======================
24.3 Application property files 应用程序的属性文件
	SpringApplication将从application.properties以下位置的文件加载属性，
	并将它们添加到Spring中Environment

1.一个当前目录下 /config子目录。
2.当前目录
3.打包到 classpath 的 /config
4.classpath根

列表按优先级按从高到低排序（高的覆盖低的， 1 > 2 > 3 > 4）。

可以使用YAML（'.yml'）文件替代“.properties”。

如果不喜欢application.properties配置文件名，


可以通过指定spring.config.name环境属性来切换到另一个。

$ java -jar myproject.jar --spring.config.name=myproject

还可以使用spring.config.location环境属性（目录位置的逗号分隔列表或文件路径）
引用显式位置。
$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties

spring.config.name  和 spring.config.location  比较早的加载文件，
这样可以确定环境属性，通常是 OS变量，系统属性，命令行参数


	------
如果 spring.config.location 是目录，则以/结尾，并加上 spring.config.name 的值，作为属性文件
spring.config.location 中的文件不支持  特殊属性 变体，且会被特殊属性覆盖
	Files specified in spring.config.location are used as-is, with no support for profile-specific variants, 
	and will be overridden by any profile-specific properties.

	// 特殊属性变体，大概是说 {} 这样的el表达式之类吧 


--------- 配置地址属性会被覆盖，也就是使用优先级高的， 搜索到高的，就不用再搜索低的

配置地址可以是多个，默认顺序是：classpath:/,classpath:/config/,file:./,file:./config/
则搜索的时候，是倒着，也就是优化使用后边的值， 优先级是增加的

如果子订单已的配置地址是  classpath:/custom-config/,file:./custom-config/  ，则优先使用自定义的，优先顺序增加

搜索顺序：
	-- 优先级依次降低
file:./custom-config/
classpath:custom-config/ 
	-- 自定义结束
file:./config/
file:./
classpath:/config/
classpath:/

默认属性配置，可以在 application.properties（或者 spring.config.name 指定的其他文件 ） 指定,
这些属性会被自定义的属性覆盖
	
	使用环境变量而不是系统变量时，大多数操作系统不允许使用周期分隔的键名称，也就是.可以使用 下划线替换
	如  SPRING_CONFIG_NAME 替换 spring.config.name

	如果在容器中运行，可以使用 JNDI属性（在 java:comp/env 里边） 
			     或者 servlet 初始化上下文参数，替换系统变量或者环境变量
			


-- end ： spring.config.location  + spring.config.name  可以指定自定的配置文件， 并且会进行属性覆盖
	 优先级按照指定的顺序递增，高的覆盖低的。
	 默认的顺序有（低 -> 高）  classpath:/,   classpath:/config/,   file:./,   file:./config/

24.4  Profile-specific properties 
	特定配置文件中的属性
	--  特定配置文件  指的是 
		1  application.properties 
		2  application-{profile}.properties ，默认 application-default.properties 
		3.  由  spring.profiles.active属性 指定


	除了 application.properties 文件，profile-specific properties 
		还可以使用 application-{profile}.properties 命名约定 来定义。
	
	如果没有设置有效的配置文件，就会使用默认的，application-default.properties 将会被加载
		 profile -> default
		
	Profile-specific properties  加载位置和 application.properties  相同，
	 无论特定配置文件 （profile-specific files）在打包的jar内还是外，都会覆盖非特定文件 non-specific ones 

	 如果指定了几个配置文件，则应用最后一个胜利策略。
		例如，由spring.profiles.active属性指定的配置文件通过SpringApplicationAPI 配置后添加，因此优先。
----
     如果在 spring.config.location 有特定文件，这些特定文件变体不会被考虑，如果也想使用 特定文件属性，在spring.config.location 使用目录
      
      If you have specified any files in spring.config.location, profile-specific variants of those files will not be considered. Use directories in spring.config.location if you also want to also use profile-specific properties.

      如果您指定了任何文件spring.config.location，则不会考虑这些文件的特定于配置文件的变体。spring.config.location如果您还想使用特定于配置文件的属性，请使用目录 。

24.5  属性占位符   Placeholders in properties
	application.properties 中的值能够被过滤，被环境中已定义的值替换 （比如 系统属性）
	------
	app.name=MyApp
	app.description=${app.name} is a Spring Boot application
	-----

24.6 使用 YAML  替换属性
	YAML 是 JSON 的一种超集，配置分层数据 很方便。
	只要classpath中有 SnakeYAML  包， SpringApplication 就支持 YAML
	  
	  spring-boot-starter 自动提供 SnakeYAML

 24.6.1 Loading YAML  
	Spring Framework 提供2个类加载 YAML 文档
		YamlPropertiesFactoryBean  会当成 Properties  加载，
		YamlMapFactoryBean   会加载成 Map

		-----
		environments:
		    dev:
			url: http://dev.bar.com
			name: Developer Setup
		    prod:
			url: http://foo.bar.com
			name: My Cool App 

		  -----------------

		会转化为这些属性  ->

		  ------
		   environments.dev.url=http://dev.bar.com
		   environments.dev.name=Developer Setup
		   environments.prod.url=http://foo.bar.com
		   environments.prod.name=My Cool App
		  ---------------

	YAML lists 会通过属性key的 [index] 引用
	------
	my:
	   servers:
	       - dev.bar.com
	       - foo.bar.com

	-------

	->

	-------------
	my.servers[0]=dev.bar.com
	my.servers[1]=foo.bar.com
	--------------
	 使用 spring DataBinder 工具 （ @ConfigurationProperties 提供的有 ）
	 可以把YAML的值绑定到属性上，这个属性的目标bean的 一个list或者set，
	  并且不需要提供 setter 或者 初始化 方法
	  如:

	-------------

	@ConfigurationProperties(prefix="my")
	public class Config {

	    private List<String> servers = new ArrayList<String>();

	    public List<String> getServers() {
		return this.servers;
	    }
	}

	--------------
	多处定义出现值覆盖时，不会覆盖列表，只会覆盖单值，
	可以通过 YAML 中的多值 改为单值， 让 PropertySource 有更高的优先级 从而进行覆盖
	如

	my:
	   servers:
	       - dev.bar.com
	       - foo.bar.com

       改为：
       
	my:
	 servers: dev.bar.com,foo.bar.com


24.6.2 将YAML作为Spring环境中的属性
	在spring 环境中 YamlPropertySourceLoader 能把 YAML 当做一个 PropertySource 
	这样可以使用 @Value 注解，使用占位符语法来接受 YAML 属性

24.6.3  Multi-profile YAML documents  多属性的YAML文档
	通过使用 spring.profiles 来区分多个属性文件的 YAML 文档

------------
	server:
	    address: 192.168.1.100
	---
	spring:
	    profiles: development
	server:
	    address: 127.0.0.1
	---
	spring:
	    profiles: production
	server:
	    address: 192.168.1.120
----------------
     如果 development profile 是活动状态，server.address 就会使用 127.0.0.1，、
     如果  development and production 都没有激活，则使用 192.168.1.100

     如果都没有激活，则使用默认值
      
      ---------
       server:
	  port: 8000
	---
	spring:
	  profiles: default
	security:
	  user:
	    password: weak
       ----------

      Spring profiles  支持使用 ! 否定符号，如果在一个文件里 同时有 否定和非否定，
      至少一个 非否定 属性文件匹配，可以没有否定文件

  24.6.4 YAML的缺点
    不能通过  @PropertySource  注解加载 YMAL 文件

  24.6.5 合并YAML列表
	  不会合并，如何此情况下没有设置某个值，则为null
	  如：
	  --------

	  @ConfigurationProperties("foo")
	public class FooProperties {

	    private final List<MyPojo> list = new ArrayList<>();

	    public List<MyPojo> getList() {
		return this.list;
	    }

	}
	----------
	YAML:

	---------
	foo:
	  list:
	    - name: my name
	      description: my description
	---
	spring:
	  profiles: dev
	foo:
	  list:
	    - name: my another name
	--------
	如果是 dev 环境，则  description 属性的值为null ，而不是 上边的值

24.7 Type-safe Configuration Properties




