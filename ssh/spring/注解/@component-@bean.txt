1. 
a
   @Component 和 @Service和 @Repository 用于使用类路径扫描自动检测和自动配置bean。
   @Bean 用于显式声明一个bean 它将bean的声明与类定义分离，并允许您按照您的选择创建和配置bean。

b
  @Component  用在类上， @Bean 用在方法上 

c  @Bean  设置生命周期 和 使用范围

@Bean(initMethod = "init", destroyMethod = "cleanup" )
@Scope("prototype")
------

2.
a. @ComponentScans(value = {@ComponentScan})
b. @ComponentScan uses string array, like this:
   @ComponentScan({"com.my.package.first","com.my.package.second"})
------------
3. 
@Import

把不同的 @Configuration的类引入进来
public class A(){}
public class B(){}

@Configuration
public class ConfigA {
   @Bean
   public A a() {
      return new A(); 
   }
}

@Configuration
@Import(ConfigA.class)
public class ConfigB {
   @Bean
   public B a() {
      return new B(); 
   }
}

public static void main(String[] args) {
   ApplicationContext ctx = 
   new AnnotationConfigApplicationContext(ConfigB.class);
   // now both beans A and B will be available...
   A a = ctx.getBean(A.class);
   B b = ctx.getBean(B.class);
}




-----------------
@Configuration
@ComponentScan
public class Application {

    @Bean
    MessageService mockMessageService() {
        return new MessageService() {
            public String getMessage() {
              return "Hello World!";
            }
        };
    }

----------
这 3 个注释和 @Component 是等效的

 @Service用于标注业务层组件

@Controller用于标注控制层组件（如struts中的action）

@Repository用于标注数据访问组件，即DAO组件

@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。