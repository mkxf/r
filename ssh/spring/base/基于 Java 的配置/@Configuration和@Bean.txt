基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring
一些有帮助的基于 Java 的注解:

@Configuration 和 @Bean 注解
	@Configuration 的注解类表示这个类可以使用 
		Spring IoC 容器作为 bean 定义的来源

	@Bean 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，
		该对象应该被注册为在 Spring 应用程序上下文中的 bean

ex:
import org.springframework.context.annotation.*;
@Configuration
public class HelloWorldConfig {
   @Bean 
   public HelloWorld helloWorld(){
      return new HelloWorld();
   }
}

==  等同
<beans>
   <bean id="helloWorld" class="com.tutorialspoint.HelloWorld" />
</beans>

---------
可以声明多个 @Bean。一旦定义了配置类，
可以使用 AnnotationConfigApplicationContext 来加载并把他们提供给 Spring 容器

public static void main(String[] args) {
   ApplicationContext ctx = 
   new AnnotationConfigApplicationContext(HelloWorldConfig.class); 
   HelloWorld helloWorld = ctx.getBean(HelloWorld.class);
   helloWorld.setMessage("Hello World!");
   helloWorld.getMessage();
}

-- 多个 
 --  1. 构造中不设置 配置类
     2. register 进去，一次可多个，也可多次
     3. refresh()
public static void main(String[] args) {
  //1
   AnnotationConfigApplicationContext ctx = 
   new AnnotationConfigApplicationContext(); 
   // 2
   ctx.register(AppConfig.class, OtherConfig.class);
   ctx.register(AdditionalConfig.class);
   // 3 
   ctx.refresh();
   // MyService 自定义的一个普通bean
   MyService myService = ctx.getBean(MyService.class);
   myService.doStuff();
}
